Link das aulas de docker:
https://www.youtube.com/watch?v=_msjG0Mvzvk&list=PLViOsriojeLrdw5VByn96gphHFxqH3O_N&index=16

Instalação do docker

WSL → Windows Subsystem for Linux
link: https://learn.microsoft.com/pt-br/windows/wsl/install

Executar o terminal do windows como ADM

wsl --install

link com passo a passo para instalação do docker
https://docs.docker.com/engine/install/ubuntu/

importante verificar o passo a passo da documentação pois sempre serão atualizados

configurando para docker iniciar assim que o ubuntu for inicializado
 sudo systemctl enable docker.service
 sudo systemctl enable containerd.service

para retirar essa configuração basta aplicar os seguintes comandos 
 sudo systemctl disable docker.service
 sudo systemctl disable containerd.service

caso tenha problemas de permissões com o docker
$ sudo groupadd docker - Cria um grupo docker
$ sudo usermod -aG docker $USER - adiciona seu usuário a esse grupo
$ newgrp docker - acessa esse grupo

feito isso teste novamente!

para apagar algum container basta usar o seguinte comandos
docker rm 4eb8  -  4eb8 diz respeito aos 4 primeiros digitos do ID do container que deseja excluir

docker rmi docker rmi hello-world:latest - onde hello-world é o nome do docker e latest a tag

comados de docker:

docker run é usado para criar e iniciar um container. Por exemplo, docker run hello-world
docker pull ubuntu baixa a imagem mais recente do Ubuntu.
docker ps lista todos os containers em execução.
parar um container em execução, usa-se docker stop, seguido do ID ou nome do container.
docker rm remove um ou mais containers. É importante garantir que o container esteja parado antes de tentar removê-lo.
docker images lista todas as imagens Docker disponíveis localmente.
Para remover uma imagem local, usa-se docker rmi, seguido do ID da imagem.
docker commit cria uma nova imagem a partir das alterações feitas em um container.
O Docker permite a criação de redes para conectar containers. O comando docker network é usado para gerenciar essas redes.
docker stop c14b: para o docker que está ativo
docker exec: Este comando permite que você execute um comando em um contêiner que já está em execução.
docker run -dit ubuntu sleep 1d: inicia docker ubuntu e estárá dormindo por um dia
docker exec -it upbeat_euler top: TOP mostra os processos rodando dentro do docker
docker pause upbeat_euler: pausa o container do nome indormado
docker unpause upbeat_euler: despausa o container com base no nome
docker stop upbeat_euler: sai do container, parando ele também
docker start -ai
docker port: mostra as portas mapeadas do container caso tenha

OBS.: Caso o terminal trave, digite CTRL + Q e CTRL + P.

FLAGS:
-d: detached mode. Isso faz com que o contêiner seja executado em segundo plano, liberando o terminal para outros comandos.
-i: interactive mode. Isso permite que você interaja com o contêiner, mantendo a entrada padrão aberta.
-t: tty. Isso aloca um terminal virtual, permitindo uma interface mais interativa, como se você estivesse usando um terminal real.
-a: all. mostra todos os containers -> docker ps -a mostra todos os containers mas caso não use o -a, será mostrado somente os containers em execução
-P: docker irá Expor todas as portas especificadas no Dockerfile com a instrução EXPOSE para a máquina host. Atribuir aleatoriamente uma porta disponível do host para cada porta exposta do contêiner.
-p: realiza o procedimenot da flag -P mas manualmente você indicará para qual porta o container apontará. ex: docker run -p 5000:80 -d dockersamples/static-site
-y: usada para indicar que o usuário deseja confirmar automaticamente todas as ações que exigem uma confirmação
-X: Comando docker é usada para habilitar o modo de depuração (debug) do Docker. Irá exibir informações detalhadas sobre as operações que estão sendo executadas, incluindo erros e avisos.
-a: All

ps: Lista containers que estão em execução no momento
ls: Listra aquivos no diretório atual


OPERADORES:
| -> O operador pipe (|) é utilizado para redirecionar a saída do comando anterior como entrada para o próximo comando.

pause: congela o container, todos os processos que estão rodando nele serão antido e parados
stop: reinicia o container junto com todos os processos, não havendo mais após o stpo

sudo service docker status: verifica os status do docker e serviços antes de iniciar
caso não esteja rodando, usar o -> sudo service docker start

=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
configurações de rede do docker
dockersamples/static-site container do docker naão oficial

configurando portas de rede do docker, container acima utiliza a porta 80


CONTINUAR NA AULA 18 8:19
https://youtu.be/IBlAvnh-hts?list=PLViOsriojeLrdw5VByn96gphHFxqH3O_N

parando um container
docker stop -t 0 eloquent_villani
esse comando vai parar seu container completamente

docker run -P  -d dockersamples/static-site
esse comando inicia o dicker -P para criar uma porta que aponte para a porta da imagem docker -d para destravar o terminal por essa imagem trava o terminal assim que iniciada

docker run -p 5000:80 -d dockersamples/static-site
dessa forma a porta que será utilizada para esse container criado será a  5000 que aponta para a porta 80 interna do docker

docker run -p 80:80 -d -e AUTHOR="Diego" dockersamples/static-site
direcionando para a porta 80 do pc para 80 do docker, -e acessa a sessão de variáveis do docker e passamos o nome de para o AUTHOR que é a variável que existe nesse containter

=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
Aula 19

 docker history dockersamples/static-sie
 Assim verificamos o histórico de uma imagem docker

 dentro do docker ubundu depois de inicializado
 docker run -it ubuntu
 inicializa ubuntu com modo interativo e terminal virutual

 apt update
 atualiza os pacotes dentro do container caso tenham

 apt install curl vim iputils-ping -y
 instalando curl vim e iputils-ping confirmando todos questionarios caso tenham durante a instalação

 docker commit quirky_sinoussi ubuntu-potencializado;
 nesse comando estaremos criando uma nova imagem com base em outra imagem, todas as alterações que foram feitas nesse container tomado com base serão replicadas para o novo container

 docker container prune
 remove todos os containers parados
=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
Aula 20
 
 docker ps -a
 lista todos os container em execução e todos os que não estão em execução no momento da listagem

 touch Doackerfile
 cria um documento chamado docker file, esse documento será responsável pelas configurações da imagem do docker
 caso tenha mais de uma imagem para trabalhar dentro do sistema, poderá ser criado um documento nome.Dockerfile

docker run -it -p 8080:8080  minha-app-python:v1
rodando contaier e especificando porta 
    
=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
Aula 21
otimização do dockker

=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
Aula 22
Fazendo Push de Imagens para o Docker Hub
https://youtu.be/xFmhLlqPi50?list=PLViOsriojeLrdw5VByn96gphHFxqH3O_N

docker container prune -f
remove todos os containers do docker independente do status dockersamples

docker rmi -f $(docker images -q)
Isso irá remover todas as imagens do Docker, incluindo as que estão sendo usadas por containers.

docker system prune -af
remover todas as imagens, containers, volumes e redes que não estão sendo usados.

